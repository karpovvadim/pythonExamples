"""
В Python декораторы - это специальные функции высшего порядка, которые позволяют
разработчикам добавлять новый функционал в существующую функцию (или метод),
ничего не изменяя внутри нее. Обычно декораторы добавляются перед определением
функции. Они используются для реализации многих возможностей приложения,
но особенно популярны при проверке данных, логирование, кэшировании, отладке,
шифровании и управлении транзакциями.
"""

from datetime import datetime


def add_timestamps(myfunc):  # функция-декоратор 'добавить отметки времени'
    def wrapper():           # обертка
        print("\n1)", datetime.now())
        myfunc()
        print("2)", datetime.now(), "\n")

    return wrapper


@add_timestamps
def hello_world():        # декорированная функция передаётся в качестве
    print("hello world")  # аргумента функции-декоратора add_timestamps(myfunc)


hello_world()
"""
Мы определили функцию-декоратор add_timestamps, которая принимает любую функцию 
в качестве аргумента. Во внутренней функции (_add_timestamps) мы фиксируем время 
до и после выполнения функции и передаем его в качестве аргумента.
Функция-декоратор возвращает объект внутренней функции с замыканием. Как мы
уже обсуждали, декораторы не делают ничего, кроме разумного использования
внутренних функций. Использование символа @ для декорирования функции 
эквивалентно следующим строкам кода:
"""
hello = add_timestamps(hello_world)
hello()

"""
также убрать вызов функции hello_world()
"""

