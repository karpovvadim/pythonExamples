"""
♦ Бесконечные потоки: с помощью генераторов можно реализовать бесконечные потоки
данных; информацию проблематично записывать в память, но генераторы легко решают
задачу, поскольку возвращают только один элемент данных за раз.
♦ Конвейерная обработка генераторами: при решении сложных задач несколько
генераторов могут быть использованы в качестве конвейера; концепцию конвейерной
обработки множеством генераторов можно объяснить на примере, где нужно вычислить
сумму квадратов простых чисел; можно решить это с помощью традиционных циклов for,
но мы попытаемся использовать два генератора: prime_gen для генерации простых
чисел и x2_gen для возведения в квадрат простых чисел, полученных от prime_gen;
выходные данные из двух генераторов передаются в функцию sum для получения их
суммы; далее приведен фрагмент кода для решения этой задачи:
"""


def prime_qen(num):
    for cand in range(2, num + 1):
        for i in range(2, cand):
            if (cand % i) == 0:
                break
            else:
                yield cand


def x2_qen(list2):
    for num in list2:
        yield num * num


print(sum(x2_qen(prime_qen(5))))
"""
Генераторы работают по запросу, поэтому не только эффективно потребляют память, 
но и позволяют создавать значения по необходимости. Это помогает избежать ненужной 
генерации данных, которые могут вообще не использоваться. Генераторы хорошо 
подходят для обработки больших объемов данных, для передачи данных из одной 
функции в другие, а также для имитации конкурентности.
"""