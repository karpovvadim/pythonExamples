"""
Смыкания и фабричные функции
Это вариант использования, где внутренние функции проявляют себя лучше всего.
Замыкание (Closure) - это вложенная функция вместе с ее окружающей средой.
Оно создается динамически и может возвращаться другой функцией. Главное
преимущество состоит в том, что возвращаемая функция имеет полный доступ к
переменным и пространствам имен, в которых она была создана, даже если замыкающая
(в нашем случае внешняя) функция завершила выполнение.
Данную концепцию можно продемонстрировать на примере. В коде ниже мы реализовали
фабрику замыканий (Closure factory) для создания функции, которая вычисляет
степень основания, а замыкание будет сохранять основание:
"""


def power_calc_factory(base):  # Closure factory - замыкающая (в нашем случае внешняя) функция
    def power_calc(exponent):  # Closure - вложенная функция вместе с ее окружающей средой.
        return base ** exponent

    return power_calc


power_calc_2 = power_calc_factory(2)
power_calc_3 = power_calc_factory(3)

print(type(power_calc_2))
print(power_calc_3)
print(power_calc_2(2))  # 2**2=4
print(power_calc_2(3))  # 2**3=8
print(power_calc_3(2))  # 3**2=9
print(power_calc_3(4))  # 3**4=81
